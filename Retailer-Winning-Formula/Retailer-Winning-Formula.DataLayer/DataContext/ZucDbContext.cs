// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Retailer_Winning_Formula.DataLayer.Entities;
using TimeZone = Retailer_Winning_Formula.DataLayer.Entities.TimeZone;

#nullable disable

namespace Retailer_Winning_Formula.DataLayer.DataContext
{
    public partial class ZucDbContext : DbContext
    {
        public ZucDbContext()
        {
        }

        public ZucDbContext(DbContextOptions<ZucDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Address> Address { get; set; }
        public virtual DbSet<AddressType> AddressType { get; set; }
        public virtual DbSet<AlertStorage> AlertStorage { get; set; }
        public virtual DbSet<AnnualSalesVolume> AnnualSalesVolume { get; set; }
        public virtual DbSet<AspNetRoleClaims> AspNetRoleClaims { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUserTokens> AspNetUserTokens { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<BamboraProfile> BamboraProfile { get; set; }
        public virtual DbSet<Batch> Batch { get; set; }
        public virtual DbSet<Bundle> Bundle { get; set; }
        public virtual DbSet<BuyingGroup> BuyingGroup { get; set; }
        public virtual DbSet<Country> Country { get; set; }
        public virtual DbSet<Currency> Currency { get; set; }
        public virtual DbSet<EmailAddress> EmailAddress { get; set; }
        public virtual DbSet<Entity> Entity { get; set; }
        public virtual DbSet<EntityAddress> EntityAddress { get; set; }
        public virtual DbSet<EntityBamboraProfile> EntityBamboraProfile { get; set; }
        public virtual DbSet<EntityEmailAddress> EntityEmailAddress { get; set; }
        public virtual DbSet<EntityIdAffiliateId> EntityIdAffiliateId { get; set; }
        public virtual DbSet<EntityMarketPartner> EntityMarketPartner { get; set; }
        public virtual DbSet<EntityPhoneNumber> EntityPhoneNumber { get; set; }
        public virtual DbSet<EntityPlans> EntityPlans { get; set; }
        public virtual DbSet<EntryFlow> EntryFlow { get; set; }
        public virtual DbSet<FrequencyType> FrequencyType { get; set; }
        public virtual DbSet<Hbfs> Hbfs { get; set; }
        public virtual DbSet<Language> Language { get; set; }
        public virtual DbSet<MarketPartner> MarketPartner { get; set; }
        public virtual DbSet<MarketPartnerAffiliate> MarketPartnerAffiliate { get; set; }
        public virtual DbSet<Mpaddress> Mpaddress { get; set; }
        public virtual DbSet<Mpaffiliate> Mpaffiliate { get; set; }
        public virtual DbSet<MpbankingDetail> MpbankingDetail { get; set; }
        public virtual DbSet<MpbillingFrequency> MpbillingFrequency { get; set; }
        public virtual DbSet<MpbuyingGroup> MpbuyingGroup { get; set; }
        public virtual DbSet<MpemailAddress> MpemailAddress { get; set; }
        public virtual DbSet<MppaymentPreference> MppaymentPreference { get; set; }
        public virtual DbSet<MpphoneNumber> MpphoneNumber { get; set; }
        public virtual DbSet<MpprodNserv> MpprodNserv { get; set; }
        public virtual DbSet<PaymentType> PaymentType { get; set; }
        public virtual DbSet<PhoneNumber> PhoneNumber { get; set; }
        public virtual DbSet<PhoneNumberType> PhoneNumberType { get; set; }
        public virtual DbSet<PlanBundle> PlanBundle { get; set; }
        public virtual DbSet<PlanImages> PlanImages { get; set; }
        public virtual DbSet<PlanPricingData> PlanPricingData { get; set; }
        public virtual DbSet<PreferredAddress> PreferredAddress { get; set; }
        public virtual DbSet<PreferredEmailAddress> PreferredEmailAddress { get; set; }
        public virtual DbSet<PreferredPhoneNumber> PreferredPhoneNumber { get; set; }
        public virtual DbSet<ProdNserv> ProdNserv { get; set; }
        public virtual DbSet<Province> Province { get; set; }
        public virtual DbSet<RewardsCard> RewardsCard { get; set; }
        public virtual DbSet<SessionData> SessionData { get; set; }
        public virtual DbSet<Settings> Settings { get; set; }
        public virtual DbSet<SmartOneActivation> SmartOneActivation { get; set; }
        public virtual DbSet<TimeZone> TimeZone { get; set; }
        public virtual DbSet<UserReports> UserReports { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Address>(entity =>
            {
                entity.ToTable("Address", "zuc");

                entity.Property(e => e.Address1)
                    .IsRequired()
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.Address2)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.Address3)
                    .HasMaxLength(120)
                    .IsUnicode(false);

                entity.Property(e => e.City)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.PostalCode)
                    .IsRequired()
                    .HasMaxLength(6)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.Province)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.AddressType)
                    .WithMany(p => p.Address)
                    .HasForeignKey(d => d.AddressTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Address_AddressType");
            });

            modelBuilder.Entity<AddressType>(entity =>
            {
                entity.ToTable("AddressType", "zuc");

                entity.Property(e => e.Represents)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<AlertStorage>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("AlertStorage", "zuc");

                entity.Property(e => e.EmailAlertAddedDate).HasColumnType("datetime");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<AnnualSalesVolume>(entity =>
            {
                entity.ToTable("AnnualSalesVolume", "zuc");
            });

            modelBuilder.Entity<AspNetRoleClaims>(entity =>
            {
                entity.ToTable("AspNetRoleClaims", "zuc");

                entity.HasIndex(e => e.RoleId, "IX_AspNetRoleClaims_RoleId");

                entity.Property(e => e.RoleId).IsRequired();

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetRoleClaims)
                    .HasForeignKey(d => d.RoleId);
            });

            modelBuilder.Entity<AspNetRoles>(entity =>
            {
                entity.ToTable("AspNetRoles", "zuc");

                entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedName] IS NOT NULL)");

                entity.Property(e => e.Name).HasMaxLength(256);

                entity.Property(e => e.NormalizedName).HasMaxLength(256);
            });

            modelBuilder.Entity<AspNetUserClaims>(entity =>
            {
                entity.ToTable("AspNetUserClaims", "zuc");

                entity.HasIndex(e => e.UserId, "IX_AspNetUserClaims_UserId");

                entity.Property(e => e.UserId).IsRequired();

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserClaims)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserLogins>(entity =>
            {
                entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

                entity.ToTable("AspNetUserLogins", "zuc");

                entity.HasIndex(e => e.UserId, "IX_AspNetUserLogins_UserId");

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.ProviderKey).HasMaxLength(128);

                entity.Property(e => e.UserId).IsRequired();

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserLogins)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserRoles>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });

                entity.ToTable("AspNetUserRoles", "zuc");

                entity.HasIndex(e => e.RoleId, "IX_AspNetUserRoles_RoleId");

                entity.HasOne(d => d.Role)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.RoleId);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserRoles)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUserTokens>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

                entity.ToTable("AspNetUserTokens", "zuc");

                entity.Property(e => e.LoginProvider).HasMaxLength(128);

                entity.Property(e => e.Name).HasMaxLength(128);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.AspNetUserTokens)
                    .HasForeignKey(d => d.UserId);
            });

            modelBuilder.Entity<AspNetUsers>(entity =>
            {
                entity.ToTable("AspNetUsers", "zuc");

                entity.HasIndex(e => e.NormalizedEmail, "EmailIndex");

                entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                    .IsUnique()
                    .HasFilter("([NormalizedUserName] IS NOT NULL)");

                entity.Property(e => e.Email).HasMaxLength(256);

                entity.Property(e => e.FirstName).HasMaxLength(100);

                entity.Property(e => e.LastName).HasMaxLength(100);

                entity.Property(e => e.NormalizedEmail).HasMaxLength(256);

                entity.Property(e => e.NormalizedUserName).HasMaxLength(256);

                entity.Property(e => e.ReceiveInfo)
                    .IsRequired()
                    .HasDefaultValueSql("(CONVERT([bit],(0)))");

                entity.Property(e => e.Terms)
                    .IsRequired()
                    .HasDefaultValueSql("(CONVERT([bit],(0)))");

                entity.Property(e => e.UserName).HasMaxLength(256);
            });

            modelBuilder.Entity<BamboraProfile>(entity =>
            {
                entity.ToTable("BamboraProfile", "zuc");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BamboraProfileId)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false)
                    .HasColumnName("BamboraProfileID");

                entity.Property(e => e.CcexpDate)
                    .HasColumnType("datetime")
                    .HasColumnName("CCExpDate");
            });

            modelBuilder.Entity<Batch>(entity =>
            {
                entity.ToTable("Batch", "zuc");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BatchCreationDate).HasColumnType("datetime");

                entity.Property(e => e.Source)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Bundle>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("Bundle", "zuc");

                entity.Property(e => e.Discount).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.EndDate).HasColumnType("datetime");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.Price).HasColumnType("decimal(6, 2)");

                entity.Property(e => e.StartDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<BuyingGroup>(entity =>
            {
                entity.ToTable("BuyingGroup", "zuc");

                entity.Property(e => e.GroupName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Country>(entity =>
            {
                entity.ToTable("Country", "zuc");

                entity.Property(e => e.CountryName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Currency>(entity =>
            {
                entity.ToTable("Currency", "zuc");

                entity.Property(e => e.Isocode)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .HasColumnName("ISOCode")
                    .IsFixedLength(true);
            });

            modelBuilder.Entity<EmailAddress>(entity =>
            {
                entity.HasKey(e => e.EmailAddress1)
                    .HasName("PK__EmailAdd__49A14741A63EAFD5");

                entity.ToTable("EmailAddress", "zuc");

                entity.HasIndex(e => e.Id, "UQ__EmailAdd__3214EC06297DBBCA")
                    .IsUnique();

                entity.Property(e => e.EmailAddress1)
                    .HasMaxLength(300)
                    .IsUnicode(false)
                    .HasColumnName("EmailAddress");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.IsVerified).HasDefaultValueSql("((0))");
            });

            modelBuilder.Entity<Entity>(entity =>
            {
                entity.ToTable("Entity", "zuc");

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.WebLinkGuid).HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<EntityAddress>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.AddressId })
                    .HasName("PK__EntityAd__3C18ED32188E4865");

                entity.ToTable("EntityAddress", "zuc");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.EntityAddress)
                    .HasForeignKey(d => d.AddressId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EntityAddress_Address");

                entity.HasOne(d => d.Entity)
                    .WithMany(p => p.EntityAddress)
                    .HasForeignKey(d => d.EntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EntityAddress_Entity");
            });

            modelBuilder.Entity<EntityBamboraProfile>(entity =>
            {
                entity.ToTable("Entity_BamboraProfile", "zuc");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EntityId).HasColumnName("EntityID");

                entity.Property(e => e.ProfileId).HasColumnName("ProfileID");
            });

            modelBuilder.Entity<EntityEmailAddress>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.EmailAddressId })
                    .HasName("PK__EntityEm__A566D965D2885EA1");

                entity.ToTable("EntityEmailAddress", "zuc");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.HasOne(d => d.EmailAddress)
                    .WithMany(p => p.EntityEmailAddress)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.EmailAddressId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EntityEmailAddress_EmailAddress");

                entity.HasOne(d => d.Entity)
                    .WithMany(p => p.EntityEmailAddress)
                    .HasForeignKey(d => d.EntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EntityEmailAddress_Entity");
            });

            modelBuilder.Entity<EntityIdAffiliateId>(entity =>
            {
                entity.ToTable("EntityID_AffiliateID", "zuc");

                entity.HasIndex(e => new { e.EntityId, e.AffiliateId }, "UQ__EntityID__4C3D278207E8C3DF")
                    .IsUnique();

                entity.Property(e => e.AffiliateId).HasColumnName("AffiliateID");

                entity.Property(e => e.EntityId).HasColumnName("EntityID");
            });

            modelBuilder.Entity<EntityMarketPartner>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EntityMarketPartner", "zuc");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();
            });

            modelBuilder.Entity<EntityPhoneNumber>(entity =>
            {
                entity.HasKey(e => new { e.EntityId, e.PhoneNumberId })
                    .HasName("PK__EntityPh__91A41B6444BF24C5");

                entity.ToTable("EntityPhoneNumber", "zuc");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Entity)
                    .WithMany(p => p.EntityPhoneNumber)
                    .HasForeignKey(d => d.EntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EntityPhoneNumber_Entity");

                entity.HasOne(d => d.PhoneNumber)
                    .WithMany(p => p.EntityPhoneNumber)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.PhoneNumberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EntityPhoneNumber_PhoneNumber");
            });

            modelBuilder.Entity<EntityPlans>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("EntityPlans", "zuc");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.SubscribedUtcdate)
                    .HasColumnType("datetime")
                    .HasColumnName("SubscribedUTCDate");
            });

            modelBuilder.Entity<EntryFlow>(entity =>
            {
                entity.ToTable("EntryFlow", "zuc");

                entity.Property(e => e.EntryFlowRoute)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<FrequencyType>(entity =>
            {
                entity.ToTable("FrequencyType", "zuc");

                entity.Property(e => e.Frequency)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Hbfs>(entity =>
            {
                entity.ToTable("HBFS", "zuc");

                entity.Property(e => e.RewardsNumber)
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.TimeRedeemedUtc)
                    .HasColumnType("datetime")
                    .HasColumnName("TimeRedeemedUTC");

                entity.HasOne(d => d.Entity)
                    .WithMany(p => p.Hbfs)
                    .HasForeignKey(d => d.EntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_EntityHBFS");
            });

            modelBuilder.Entity<Language>(entity =>
            {
                entity.ToTable("Language", "zuc");

                entity.Property(e => e.Name)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MarketPartner>(entity =>
            {
                entity.ToTable("MarketPartner", "zuc");

                entity.Property(e => e.Asvid).HasColumnName("ASVId");

                entity.Property(e => e.Dbaname)
                    .IsRequired()
                    .IsUnicode(false)
                    .HasColumnName("DBAName");

                entity.Property(e => e.LegalName)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.RetailerCode)
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.Property(e => e.TaxNumber)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<MarketPartnerAffiliate>(entity =>
            {
                entity.ToTable("MarketPartnerAffiliate", "zuc");
            });

            modelBuilder.Entity<Mpaddress>(entity =>
            {
                entity.ToTable("MPAddress", "zuc");
            });

            modelBuilder.Entity<Mpaffiliate>(entity =>
            {
                entity.ToTable("MPAffiliate", "zuc");
            });

            modelBuilder.Entity<MpbankingDetail>(entity =>
            {
                entity.ToTable("MPBankingDetail", "zuc");
            });

            modelBuilder.Entity<MpbillingFrequency>(entity =>
            {
                entity.ToTable("MPBillingFrequency", "zuc");

                entity.Property(e => e.LastPostingDate).HasColumnType("date");
            });

            modelBuilder.Entity<MpbuyingGroup>(entity =>
            {
                entity.ToTable("MPBuyingGroup", "zuc");
            });

            modelBuilder.Entity<MpemailAddress>(entity =>
            {
                entity.ToTable("MPEmailAddress", "zuc");
            });

            modelBuilder.Entity<MppaymentPreference>(entity =>
            {
                entity.ToTable("MPPaymentPreference", "zuc");

                entity.Property(e => e.CommEarningPmtTypeId).HasDefaultValueSql("((1))");

                entity.Property(e => e.PlanRegistrationPmtTypeId).HasDefaultValueSql("((1))");

                entity.Property(e => e.ProdPurchasePmtTypeId).HasDefaultValueSql("((1))");
            });

            modelBuilder.Entity<MpphoneNumber>(entity =>
            {
                entity.ToTable("MPPhoneNumber", "zuc");
            });

            modelBuilder.Entity<MpprodNserv>(entity =>
            {
                entity.ToTable("MPProdNServ", "zuc");

                entity.Property(e => e.ProdNservId).HasColumnName("ProdNServId");
            });

            modelBuilder.Entity<PaymentType>(entity =>
            {
                entity.ToTable("PaymentType", "zuc");

                entity.Property(e => e.Represents)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PhoneNumber>(entity =>
            {
                entity.HasKey(e => e.PhoneNumber1)
                    .HasName("PK__PhoneNum__85FB4E3967896EB4");

                entity.ToTable("PhoneNumber", "zuc");

                entity.HasIndex(e => e.Id, "UQ__PhoneNum__3214EC0629F7F51C")
                    .IsUnique();

                entity.Property(e => e.PhoneNumber1)
                    .ValueGeneratedNever()
                    .HasColumnName("PhoneNumber");

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.HasOne(d => d.PhoneNumberType)
                    .WithMany(p => p.PhoneNumber)
                    .HasForeignKey(d => d.PhoneNumberTypeId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PhoneNumber_PhoneNumberType");
            });

            modelBuilder.Entity<PhoneNumberType>(entity =>
            {
                entity.ToTable("PhoneNumberType", "zuc");

                entity.Property(e => e.Represents)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PlanBundle>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PlanBundle", "zuc");
            });

            modelBuilder.Entity<PlanImages>(entity =>
            {
                entity.HasKey(e => e.PlanSumId)
                    .HasName("PK__PlanImag__5F572E368A8073FF");

                entity.ToTable("PlanImages", "zuc");

                entity.Property(e => e.PlanSumId).ValueGeneratedNever();

                entity.Property(e => e.ImageLink)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Plans)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PlanPricingData>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("PlanPricingData", "zuc");

                entity.Property(e => e.ComboAddonCost).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.ComboAddonDiscount).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.ComboAllThreeAddonCost).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.ComboAllThreeDiscount).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.ComboAlternateAddonCost).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.ComboAlternateAddonDiscount).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.ComboAlternateType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ComboType)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.Property(e => e.PlanCost).HasColumnType("decimal(19, 4)");

                entity.Property(e => e.PlanType)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<PreferredAddress>(entity =>
            {
                entity.HasKey(e => e.EntityId)
                    .HasName("PK__Preferre__9C892F9D35126A3D");

                entity.ToTable("PreferredAddress", "zuc");

                entity.Property(e => e.EntityId).ValueGeneratedNever();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Address)
                    .WithMany(p => p.PreferredAddress)
                    .HasForeignKey(d => d.AddressId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PreferredAddress_Address");

                entity.HasOne(d => d.Entity)
                    .WithOne(p => p.PreferredAddress)
                    .HasForeignKey<PreferredAddress>(d => d.EntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PreferredAddress_Entity");
            });

            modelBuilder.Entity<PreferredEmailAddress>(entity =>
            {
                entity.HasKey(e => e.EntityId)
                    .HasName("PK__Preferre__9C892F9D18E9E7FA");

                entity.ToTable("PreferredEmailAddress", "zuc");

                entity.Property(e => e.EntityId).ValueGeneratedNever();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.HasOne(d => d.EmailAddress)
                    .WithMany(p => p.PreferredEmailAddress)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.EmailAddressId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PreferredEmailAddress_EmailAddress");

                entity.HasOne(d => d.Entity)
                    .WithOne(p => p.PreferredEmailAddress)
                    .HasForeignKey<PreferredEmailAddress>(d => d.EntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PreferredEmailAddress_Entity");
            });

            modelBuilder.Entity<PreferredPhoneNumber>(entity =>
            {
                entity.HasKey(e => e.EntityId)
                    .HasName("PK__Preferre__9C892F9DFF355495");

                entity.ToTable("PreferredPhoneNumber", "zuc");

                entity.Property(e => e.EntityId).ValueGeneratedNever();

                entity.Property(e => e.Id).ValueGeneratedOnAdd();

                entity.HasOne(d => d.Entity)
                    .WithOne(p => p.PreferredPhoneNumber)
                    .HasForeignKey<PreferredPhoneNumber>(d => d.EntityId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PreferredPhoneNumber_Entity");

                entity.HasOne(d => d.PhoneNumber)
                    .WithMany(p => p.PreferredPhoneNumber)
                    .HasPrincipalKey(p => p.Id)
                    .HasForeignKey(d => d.PhoneNumberId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PreferredPhoneNumber_PhoneNumber");
            });

            modelBuilder.Entity<ProdNserv>(entity =>
            {
                entity.ToTable("ProdNServ", "zuc");

                entity.Property(e => e.Category)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Province>(entity =>
            {
                entity.ToTable("Province", "zuc");

                entity.Property(e => e.ProvinceCode)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.ProvinceName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RewardsCard>(entity =>
            {
                entity.ToTable("RewardsCard", "zuc");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.EntityMarketPartnerId).HasColumnName("EntityMarketPartnerID");

                entity.Property(e => e.RewardNumber)
                    .IsRequired()
                    .IsUnicode(false);
            });

            modelBuilder.Entity<SessionData>(entity =>
            {
                entity.ToTable("SessionData", "zuc");

                entity.Property(e => e.ChosenPlans)
                    .HasMaxLength(20)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Settings>(entity =>
            {
                entity.HasKey(e => e.Key);

                entity.ToTable("Settings", "zuc");

                entity.Property(e => e.Key).HasDefaultValueSql("(N'')");

                entity.Property(e => e.Value).HasColumnType("decimal(18, 2)");
            });

            modelBuilder.Entity<SmartOneActivation>(entity =>
            {
                entity.ToTable("SmartOneActivation", "zuc");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ActivationDate).HasColumnType("datetime");

                entity.Property(e => e.Code)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CompleteValue)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreationDate).HasColumnType("datetime");

                entity.Property(e => e.MarketPartnerReceipt).IsUnicode(false);
            });

            modelBuilder.Entity<TimeZone>(entity =>
            {
                entity.ToTable("TimeZone", "zuc");

                entity.Property(e => e.Abbreviation)
                    .IsRequired()
                    .HasMaxLength(3)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.IsCurrentlyDst).HasColumnName("IsCurrentlyDST");

                entity.Property(e => e.Offset)
                    .IsRequired()
                    .HasMaxLength(12);

                entity.Property(e => e.Tzname)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("TZName");
            });

            modelBuilder.Entity<UserReports>(entity =>
            {
                entity.ToTable("UserReports", "zuc");

                entity.Property(e => e.Id).ValueGeneratedNever();

                entity.Property(e => e.AnnualSalesVolume).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AvgMonthlyRetailValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.AvgTicketValue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.PercentageOfRevenuePlanSales).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SalesAssociateCommission).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.SlpPotentialEnrolments).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year1MultipleTimesImprovementWithSlp).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year1NetSmartOneRevenue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year1SmarterLivingRecuringRevenue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year1TotalRevenue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year2MultipleTimesImprovementWithSlp).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year2NetSmartOneRevenue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year2SmarterLivingRecuringRevenue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year2TotalRevenue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year3MultipleTimesImprovementWithSlp).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year3NetSmartOneRevenue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year3SmarterLivingRecuringRevenue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year3TotalRevenue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year4MultipleTimesImprovementWithSlp).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year4NetSmartOneRevenue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year4SmarterLivingRecuringRevenue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year4TotalRevenue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year5MultipleTimesImprovementWithSlp).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year5NetSmartOneRevenue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year5SmarterLivingRecuringRevenue).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.Year5TotalRevenue).HasColumnType("decimal(18, 2)");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}